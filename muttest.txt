// Copy paste this Java Template and save it as "PatientNames.java"
import java.lang.String;
import java.lang.System;
import java.util.*;
import java.io.*;
import java.util.ArrayList;
import java.util.TreeSet;

// write list of collaborators here:
// year 2017 hash code: DZAjKugdE9QiOQKGFbut (do NOT delete this line)
class BSTVertex {
  public String name;
  public int gender;
  public BSTVertex parent, left, right;
  public int balanceFactor;

  BSTVertex(String name, int gender) {
    this.name = name;
    this.gender = gender;
    parent = left = right = null;
    balanceFactor = 0;
  }
}

class PatientNames {
  // if needed, declare a private data structure here that
  // is accessible to all methods in this class

  // --------------------------------------------
  protected BSTVertex maleRoot;
  protected BSTVertex femaleRoot;

  // --------------------------------------------

  public PatientNames() {
    // Write necessary code during construction;
    //
    // write your answer here

    // --------------------------------------------
    maleRoot = null;
    femaleRoot = null;
    // --------------------------------------------
  }

  //To check whether the left or right subtree has a greater height
  int getHeight(BSTVertex T) {
    if(T == null) return -1;
    else return Math.max(getHeight(T.left), getHeight(T.right)) + 1;
  }

  //Set the balance factor of a vertex by checking the height of left and right subtree
  void setBalanceFactor(BSTVertex T) {
    T.balanceFactor = getHeight(T.left) - getHeight(T.right);
  }

  //Recusive call to balance a tree from a particular vertex
  void balanceRoot(BSTVertex T) {
    setBalanceFactor(T);

    //4 conditions to balance a root
    //When left subtree is greater than right subtree
    if (T.balanceFactor == 2 && 0 <= T.left.balanceFactor && T.left.balanceFactor < 1)
      T = rotateRight(T);
    else if (T.balanceFactor == 2 && T.left.balanceFactor == -1)
      T = rotateLeftRight(T);
    //When right subtree is greater than left subtree
    else if (T.balanceFactor == -2 && -1 <= T.right.balanceFactor && T.right.balanceFactor <= 0)
      T = rotateLeft(T);
    else if (T.balanceFactor == -2 && T.right.balanceFactor == 1)
      T = rotateRightLeft(T);

    //Recursive call to balance Parent Vertex when Parent is not null
    if (T.parent == null) {
      if (T.gender == 1) maleRoot = T;
      else femaleRoot = T;
    } else {
      balanceRoot(T.parent);
    }
  }

  BSTVertex rotateLeft(BSTVertex T) {
    BSTVertex W = T.right;
    W.parent = T.parent;
    T.parent = W;
    T.right = W.left;
    if (W.left != null)
      W.left.parent = T;
    W.left = T;

    //Reset Balance Factor after rotating
    setBalanceFactor(T);
    setBalanceFactor(W);

    return W;
  }

  BSTVertex rotateRight(BSTVertex T) {
    BSTVertex W = T.left;
    W.parent = T.parent;
    T.parent = W;
    T.left = W.right;
    if (W.right != null)
      W.right.parent = T;
    W.right = T;

    //Reset Balance Factor after rotating
    setBalanceFactor(T);
    setBalanceFactor(W);

    return W;
  }

  //To perform double rotation
  BSTVertex rotateLeftRight(BSTVertex T) {
    T.left = rotateLeft(T.left);
    T = rotateRight(T);
    return T;
  }

  //To perform double rotation
  BSTVertex rotateRightLeft(BSTVertex T) {
    T.right = rotateRight(T.right);
    T = rotateLeft(T);
    return T;
  }

  int getNumberOfPatients(BSTVertex T, String START, String END) {
    int numberOfPatients = 0;

    int parentCompareStart = 0;
    int parentCompareEnd = 0;

    //To check if it is an empty tree
    if (T == null) {
      return 0;
    }

    //To get value of compare START and compare END when parent is not null
    if (T.parent != null) {
      parentCompareStart = T.parent.name.compareTo(START);
      parentCompareEnd = T.parent.name.compareTo(END);
    }

    if (T.name.compareTo(START) >= 0 && T.name.compareTo(END) < 0) {
      //To return left and right subtree when parent is not in range
      if (!(parentCompareStart >= 0 && parentCompareEnd < 0)) {
        return getNumberOfPatients(T.left, START, END) + getNumberOfPatients(T.right, START, END) + 1;
      }
      //To return left subtree of parent with T as the left child of Parent
      else if (T.parent.left == T) {
        return getNumberOfPatients(T.left, START, END) + getVertexes(T.right) + 1;
      }
      //To return right subtree of parent with T as the right child of Parent
      else if (T.parent.right == T) {
        return getVertexes(T.left) + getNumberOfPatients(T.right, START, END) + 1;
      }
    }

    else if (T.name.compareTo(START) >= 0) {
      return getNumberOfPatients(T.left, START, END);
    }

    //Checking for vertexes on the left subtree
    else if (T.name.compareTo(END) < 0) {
      return getNumberOfPatients(T.right, START, END);
    }
    return numberOfPatients;
  }

  //Recursive call to get total number of vertex from a particular vertex
  int getVertexes (BSTVertex T) {
    if (T == null) return 0;
    else if (T.left == null && T.right == null) return 1;
    else if (T.right == null) return getVertexes(T.left) + 1;
    else if (T.left == null) return  getVertexes(T.right) + 1;
    else return getVertexes(T.left) + getVertexes(T.right);
  }

  void addVertex(BSTVertex root, BSTVertex newPatient) {
    //To add the new patient to the left subtree
    if (root.name.compareTo(newPatient.name) >= 0) {
      //Recusive call to add patient to the left sub tree
      if (root.left != null) {
        addVertex(root.left, newPatient);
      } else {
        root.left = newPatient;
        newPatient.parent = root;
        balanceRoot(newPatient); //Balancing the added root
      }
    }

    //To add the new patient to the right subtree
    else if (root.name.compareTo(newPatient.name) < 0) {
      //Recusive call to add patient to the right sub tree
      if(root.right != null) {
        addVertex(root.right, newPatient);
      } else {
        root.right = newPatient;
        newPatient.parent = root;
        balanceRoot(newPatient); //Balancing the added root
      }
    }
  }

  void AddPatient(String patientName, int gender) {
    // You have to insert the information (patientName, gender)
    // into your chosen data structure
    //
    // write your answer here
    // --------------------------------------------
    BSTVertex newPatient = new BSTVertex(patientName, gender);

    //To add male patients to the maleRoot
    if (gender == 1) {
      if (maleRoot == null)
        maleRoot = newPatient;
      else
        addVertex(maleRoot, newPatient);
    }
    //To add female patients to the femaleRoot
    else if (gender == 2) {
      if (femaleRoot == null)
        femaleRoot = newPatient;
      else
        addVertex(femaleRoot, newPatient);
    }
    // --------------------------------------------
  }

  void RemovePatient(String patientName) {
    // You have to remove the patientName from your chosen data structure
    //
    // write your answer here

    // --------------------------------------------

    // --------------------------------------------
  }

  int Query(String START, String END, int gender) {
    int ans = 0;

    // You have to answer how many patient name starts
    // with prefix that is inside query interval [START..END)
    //
    // write your answer here

    // --------------------------------------------

    //To query for male Patients
    if (gender == 1) {
      ans = getNumberOfPatients(maleRoot, START, END);
    }
    //To query for female patients
    else if (gender == 2) {
      ans = getNumberOfPatients(femaleRoot, START, END);
    }
    //To query for both male and female patients
    else if (gender == 0) {
      ans = getNumberOfPatients(maleRoot, START, END)
                        + getNumberOfPatients(femaleRoot, START, END);
    }
    // --------------------------------------------

    return ans;
  }

  void run() throws Exception {
    // do not alter this method to avoid unnecessary errors with the automated judging
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    while (true) {
      StringTokenizer st = new StringTokenizer(br.readLine());
      int command = Integer.parseInt(st.nextToken());
      if (command == 0) // end of input
        break;
      else if (command == 1) // AddPatient
        AddPatient(st.nextToken(), Integer.parseInt(st.nextToken()));
      else if (command == 2) // RemovePatient
        RemovePatient(st.nextToken());
      else // if (command == 3) // Query
        pr.println(Query(st.nextToken(), // START
                st.nextToken(), // END
                Integer.parseInt(st.nextToken()))); // GENDER
    }
    pr.close();
  }

  public static void main(String[] args) throws Exception {
    // do not alter this method to avoid unnecessary errors with the automated judging
    PatientNames ps2 = new PatientNames();
    ps2.run();
  }
}
